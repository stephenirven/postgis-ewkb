// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: gis.sql

package db

import (
	"context"

	"github.com/stephenirven/go-postgis/geo"
)

const createGISData = `-- name: CreateGISData :one
INSERT INTO gisdata (
  geo
) VALUES (
  $1::geometry
)
RETURNING id, geo
`

func (q *Queries) CreateGISData(ctx context.Context, argGeo geo.GISGeometry) (Gisdatum, error) {
	row := q.db.QueryRowContext(ctx, createGISData, argGeo)
	var i Gisdatum
	err := row.Scan(&i.ID, &i.Geo)
	return i, err
}

const deleteGISData = `-- name: DeleteGISData :exec
DELETE FROM gisdata
WHERE id = $1
`

func (q *Queries) DeleteGISData(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGISData, id)
	return err
}

const getAllGISData = `-- name: GetAllGISData :many
SELECT geo::geometry
FROM gisdata
`

func (q *Queries) GetAllGISData(ctx context.Context) ([]geo.GISGeometry, error) {
	rows, err := q.db.QueryContext(ctx, getAllGISData)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []geo.GISGeometry
	for rows.Next() {
		var geo geo.GISGeometry
		if err := rows.Scan(&geo); err != nil {
			return nil, err
		}
		items = append(items, geo)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGISData = `-- name: GetGISData :one
SELECT geo::geometry 
FROM gisdata
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGISData(ctx context.Context, id int64) (geo.GISGeometry, error) {
	row := q.db.QueryRowContext(ctx, getGISData, id)
	var geo geo.GISGeometry
	err := row.Scan(&geo)
	return geo, err
}

const listGISDataWithinDistance = `-- name: ListGISDataWithinDistance :many
SELECT geo::geometry 
FROM gisdata
WHERE
  ST_DWithin(
    geo::geometry,    
    $3::geometry,
    $4::INT)
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListGISDataWithinDistanceParams struct {
	Limit  int64           `json:"limit"`
	Offset int64           `json:"offset"`
	Geo    geo.GISGeometry `json:"geo"`
	Range  int32           `json:"range"`
}

func (q *Queries) ListGISDataWithinDistance(ctx context.Context, arg ListGISDataWithinDistanceParams) ([]geo.GISGeometry, error) {
	rows, err := q.db.QueryContext(ctx, listGISDataWithinDistance,
		arg.Limit,
		arg.Offset,
		arg.Geo,
		arg.Range,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []geo.GISGeometry
	for rows.Next() {
		var geo geo.GISGeometry
		if err := rows.Scan(&geo); err != nil {
			return nil, err
		}
		items = append(items, geo)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
