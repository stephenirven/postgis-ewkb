// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: organisation.sql

package db

import (
	"context"
	"database/sql"
)

const createOrganisation = `-- name: CreateOrganisation :one
INSERT INTO organisation (
  country_code, merchant_name
) VALUES (
  $1, $2
)
RETURNING id, country_code, merchant_name, created_at
`

type CreateOrganisationParams struct {
	CountryCode  sql.NullInt32  `json:"country_code"`
	MerchantName sql.NullString `json:"merchant_name"`
}

func (q *Queries) CreateOrganisation(ctx context.Context, arg CreateOrganisationParams) (Organisation, error) {
	row := q.db.QueryRowContext(ctx, createOrganisation, arg.CountryCode, arg.MerchantName)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.MerchantName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrganisation = `-- name: DeleteOrganisation :exec
DELETE FROM organisation
WHERE id = $1
`

func (q *Queries) DeleteOrganisation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrganisation, id)
	return err
}

const getOrganisation = `-- name: GetOrganisation :one
SELECT id, country_code, merchant_name, created_at FROM organisation
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrganisation(ctx context.Context, id int64) (Organisation, error) {
	row := q.db.QueryRowContext(ctx, getOrganisation, id)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.MerchantName,
		&i.CreatedAt,
	)
	return i, err
}

const getOrganisationForUpdate = `-- name: GetOrganisationForUpdate :one
SELECT id, country_code, merchant_name, created_at FROM organisation
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetOrganisationForUpdate(ctx context.Context, id int64) (Organisation, error) {
	row := q.db.QueryRowContext(ctx, getOrganisationForUpdate, id)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.MerchantName,
		&i.CreatedAt,
	)
	return i, err
}

const listOrganisations = `-- name: ListOrganisations :many

SELECT id, country_code, merchant_name, created_at FROM organisation
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListOrganisationsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

// -- name: GetDetails :many
// SELECT sqlc.embed(accounts), sqlc.embed(transfers)
// FROM accounts JOIN transfers on (transfers.from_account_id = accounts.id OR transfers.to_account_id  = accounts.id);
func (q *Queries) ListOrganisations(ctx context.Context, arg ListOrganisationsParams) ([]Organisation, error) {
	rows, err := q.db.QueryContext(ctx, listOrganisations, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organisation
	for rows.Next() {
		var i Organisation
		if err := rows.Scan(
			&i.ID,
			&i.CountryCode,
			&i.MerchantName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganisation = `-- name: UpdateOrganisation :one
UPDATE organisation
  set country_code = $2, 
  merchant_name = $3 
WHERE id = $1
RETURNING id, country_code, merchant_name, created_at
`

type UpdateOrganisationParams struct {
	ID           int64          `json:"id"`
	CountryCode  sql.NullInt32  `json:"country_code"`
	MerchantName sql.NullString `json:"merchant_name"`
}

func (q *Queries) UpdateOrganisation(ctx context.Context, arg UpdateOrganisationParams) (Organisation, error) {
	row := q.db.QueryRowContext(ctx, updateOrganisation, arg.ID, arg.CountryCode, arg.MerchantName)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.MerchantName,
		&i.CreatedAt,
	)
	return i, err
}
